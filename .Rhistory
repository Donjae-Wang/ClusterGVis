return_heatmap = T)
upgrade_graph()
HSMM[row.names(subset(BEAM_res,qval < 1e-4)),]
cds = NULL
branches
cds = NULL
# branches
branches_name = NULL
cluster_rows = TRUE
hclust_method = "ward.D2"
num_clusters = 6
hmcols = NULL
add_annotation_row = NULL
add_annotation_col = NULL
show_rownames = FALSE
use_gene_short_name = TRUE
norm_method = c("vstExprs", "log")
scale_max=3
scale_min=-3
trend_formula = '~sm.ns(Pseudotime, df=3)'
return_heatmap=FALSE
cores=1
cds = HSMM[row.names(subset(BEAM_res,qval < 1e-4)),]
branches = c(1,3,4,5)
num_clusters = 4
cores = 1
use_gene_short_name = T
show_rownames = T
return_heatmap = T
pseudocount <- 1
pseudocount <- 1
if(!(all(branches %in% Biobase::pData(cds)$State)) & length(branches) == 1){
stop('This function only allows to make multiple branch plots where branches is included in the pData')
}
branch_label <- branches
if(!is.null(branches_name)){
if(length(branches) != length(branches_name)){
stop('branches_name should have the same length as branches')
}
branch_label <- branches_name
}
#test whether or not the states passed to branches are true branches (not truncks) or there are terminal cells
g <- cds@minSpanningTree
m <- NULL
# branche_cell_num <- c()
for(branch_in in branches) {
branches_cells <- row.names(subset(Biobase::pData(cds), State == branch_in))
root_state <- subset(Biobase::pData(cds), Pseudotime == 0)[, 'State']
root_state_cells <- row.names(subset(Biobase::pData(cds), State == root_state))
if(cds@dim_reduce_type != 'ICA') {
root_state_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[root_state_cells, ], sep = ''))
branches_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[branches_cells, ], sep = ''))
}
root_cell <- root_state_cells[which(igraph::degree(g, v = root_state_cells) == 1)]
tip_cell <- branches_cells[which(igraph::degree(g, v = branches_cells) == 1)]
traverse_res <- traverseTree(g, root_cell, tip_cell)
path_cells <- names(traverse_res$shortest_path[[1]])
if(cds@dim_reduce_type != 'ICA') {
pc_ind <- cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex
path_cells <- row.names(pc_ind)[paste('Y_', pc_ind[, 1], sep = '') %in% path_cells]
}
cds_subset <- cds[, path_cells]
newdata <- data.frame(Pseudotime = seq(0, max(Biobase::pData(cds_subset)$Pseudotime),length.out = 100))
if (requireNamespace("monocle", quietly = TRUE)) {
tmp <- monocle::genSmoothCurves(cds_subset, cores=cores, trend_formula = trend_formula,
relative_expr = T, new_data = newdata)
} else {
warning("Cannot find monocle 'monocle' is not installed.")
}
if(is.null(m))
m <- tmp
else{
m <- cbind(m, tmp)
}
}
#' traverseTree function
#'
#' @param g NULL
#' @param starting_cell NULL
#' @param end_cells NULL
#'
#'
traverseTree <- function(g, starting_cell, end_cells){
if (requireNamespace("igraph", quietly = TRUE)) {
distance <- igraph::shortest.paths(g, v=starting_cell, to=end_cells)
branchPoints <- which(igraph::degree(g) == 3)
path <- igraph::shortest_paths(g, from = starting_cell, end_cells)
}else{
stop("Package 'igraph' is required for this functionality. Please install it.")
}
return(list(shortest_path = path$vpath, distance = distance,
branch_points = intersect(branchPoints, unlist(path$vpath))))
}
# branche_cell_num <- c()
for(branch_in in branches) {
branches_cells <- row.names(subset(Biobase::pData(cds), State == branch_in))
root_state <- subset(Biobase::pData(cds), Pseudotime == 0)[, 'State']
root_state_cells <- row.names(subset(Biobase::pData(cds), State == root_state))
if(cds@dim_reduce_type != 'ICA') {
root_state_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[root_state_cells, ], sep = ''))
branches_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[branches_cells, ], sep = ''))
}
root_cell <- root_state_cells[which(igraph::degree(g, v = root_state_cells) == 1)]
tip_cell <- branches_cells[which(igraph::degree(g, v = branches_cells) == 1)]
traverse_res <- traverseTree(g, root_cell, tip_cell)
path_cells <- names(traverse_res$shortest_path[[1]])
if(cds@dim_reduce_type != 'ICA') {
pc_ind <- cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex
path_cells <- row.names(pc_ind)[paste('Y_', pc_ind[, 1], sep = '') %in% path_cells]
}
cds_subset <- cds[, path_cells]
newdata <- data.frame(Pseudotime = seq(0, max(Biobase::pData(cds_subset)$Pseudotime),length.out = 100))
if (requireNamespace("monocle", quietly = TRUE)) {
tmp <- monocle::genSmoothCurves(cds_subset, cores=cores, trend_formula = trend_formula,
relative_expr = T, new_data = newdata)
} else {
warning("Cannot find monocle 'monocle' is not installed.")
}
if(is.null(m))
m <- tmp
else{
m <- cbind(m, tmp)
}
}
#' traverseTree function
#'
#' @param g NULL
#' @param starting_cell NULL
#' @param end_cells NULL
#'
#'
traverseTree <- function(g, starting_cell, end_cells){
if (requireNamespace("igraph", quietly = TRUE)) {
# distance <- igraph::shortest.paths(g, v=starting_cell, to=end_cells)
distance <- igraph::distances(g, v=starting_cell, to=end_cells)
branchPoints <- which(igraph::degree(g) == 3)
path <- igraph::shortest_paths(g, from = starting_cell, end_cells)
}else{
stop("Package 'igraph' is required for this functionality. Please install it.")
}
return(list(shortest_path = path$vpath, distance = distance,
branch_points = intersect(branchPoints, unlist(path$vpath))))
}
# branche_cell_num <- c()
for(branch_in in branches) {
branches_cells <- row.names(subset(Biobase::pData(cds), State == branch_in))
root_state <- subset(Biobase::pData(cds), Pseudotime == 0)[, 'State']
root_state_cells <- row.names(subset(Biobase::pData(cds), State == root_state))
if(cds@dim_reduce_type != 'ICA') {
root_state_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[root_state_cells, ], sep = ''))
branches_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[branches_cells, ], sep = ''))
}
root_cell <- root_state_cells[which(igraph::degree(g, v = root_state_cells) == 1)]
tip_cell <- branches_cells[which(igraph::degree(g, v = branches_cells) == 1)]
traverse_res <- traverseTree(g, root_cell, tip_cell)
path_cells <- names(traverse_res$shortest_path[[1]])
if(cds@dim_reduce_type != 'ICA') {
pc_ind <- cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex
path_cells <- row.names(pc_ind)[paste('Y_', pc_ind[, 1], sep = '') %in% path_cells]
}
cds_subset <- cds[, path_cells]
newdata <- data.frame(Pseudotime = seq(0, max(Biobase::pData(cds_subset)$Pseudotime),length.out = 100))
if (requireNamespace("monocle", quietly = TRUE)) {
tmp <- monocle::genSmoothCurves(cds_subset, cores=cores, trend_formula = trend_formula,
relative_expr = T, new_data = newdata)
} else {
warning("Cannot find monocle 'monocle' is not installed.")
}
if(is.null(m))
m <- tmp
else{
m <- cbind(m, tmp)
}
}
#remove genes with no expression in any condition
m=m[!apply(m,1,sum)==0,]
norm_method <- match.arg(norm_method)
# FIXME: this needs to check that vst values can even be computed. (They can only be if we're using NB as the expressionFamily)
if (requireNamespace("monocle", quietly = TRUE)) {
if(norm_method == 'vstExprs' && is.null(cds@dispFitInfo[["blind"]]$disp_func) == FALSE) {
m = monocle::vstExprs(cds, expr_matrix=m)
}else if(norm_method == 'log') {
m = log10(m+pseudocount)
}
} else {
warning("Cannot find monocle 'monocle' is not installed.")
}
norm_method
norm_method = "vstExprs"
# FIXME: this needs to check that vst values can even be computed. (They can only be if we're using NB as the expressionFamily)
if (requireNamespace("monocle", quietly = TRUE)) {
if(norm_method == 'vstExprs' && is.null(cds@dispFitInfo[["blind"]]$disp_func) == FALSE) {
m = monocle::vstExprs(cds, expr_matrix=m)
}else if(norm_method == 'log') {
m = log10(m+pseudocount)
}
} else {
warning("Cannot find monocle 'monocle' is not installed.")
}
m=m[!apply(m,1,sd)==0,]
m=Matrix::t(scale(Matrix::t(m),center=TRUE))
m=m[is.na(row.names(m)) == FALSE,]
m[is.nan(m)] = 0
m[m>scale_max] = scale_max
m[m<scale_min] = scale_min
heatmap_matrix <- m
row_dist <- as.dist((1 - cor(Matrix::t(heatmap_matrix)))/2)
row_dist[is.na(row_dist)] <- 1
if(is.null(hmcols)) {
bks <- seq(-3.1,3.1, by = 0.1)
hmcols <- colorRamps::blue2green2red(length(bks) - 1)
}else {
bks <- seq(-3.1,3.1, length.out = length(hmcols))
}
ph <- pheatmap::pheatmap(heatmap_matrix,
useRaster = T,
cluster_cols=FALSE,
cluster_rows=T,
show_rownames=F,
show_colnames=F,
clustering_distance_rows=row_dist,
clustering_method = hclust_method,
cutree_rows=num_clusters,
silent=TRUE,
filename=NA,
breaks=bks,
color=hmcols)
ph
pheatmap::pheatmap(heatmap_matrix,
useRaster = T,
cluster_cols=FALSE,
cluster_rows=T,
show_rownames=F,
show_colnames=F,
clustering_distance_rows=row_dist,
clustering_method = hclust_method,
cutree_rows=num_clusters,
silent=TRUE,
filename=NA,
breaks=bks,
color=hmcols)
heatmap_matrix
bks
hmcols
num_clusters
hclust_method
row_dist
pheatmap::pheatmap(heatmap_matrix,
useRaster = T,
cluster_cols=FALSE,
cluster_rows=T,
show_rownames=F,
show_colnames=F,
clustering_distance_rows=row_dist,
clustering_method = hclust_method,
cutree_rows=num_clusters,
silent=TRUE,
filename=NA,
breaks=bks,
color=hmcols)
pheatmap::pheatmap(heatmap_matrix)
# FIXME: this needs to check that vst values can even be computed. (They can only be if we're using NB as the expressionFamily)
if (requireNamespace("monocle", quietly = TRUE)) {
if(norm_method == 'vstExprs' && is.null(cds@dispFitInfo[["blind"]]$disp_func) == FALSE) {
m = monocle::vstExprs(cds, expr_matrix=m)
}else if(norm_method == 'log') {
m = log10(m+pseudocount)
}
} else {
warning("Cannot find monocle 'monocle' is not installed.")
}
m
View(m)
m <- NULL
# branche_cell_num <- c()
for(branch_in in branches) {
branches_cells <- row.names(subset(Biobase::pData(cds), State == branch_in))
root_state <- subset(Biobase::pData(cds), Pseudotime == 0)[, 'State']
root_state_cells <- row.names(subset(Biobase::pData(cds), State == root_state))
if(cds@dim_reduce_type != 'ICA') {
root_state_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[root_state_cells, ], sep = ''))
branches_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[branches_cells, ], sep = ''))
}
root_cell <- root_state_cells[which(igraph::degree(g, v = root_state_cells) == 1)]
tip_cell <- branches_cells[which(igraph::degree(g, v = branches_cells) == 1)]
traverse_res <- traverseTree(g, root_cell, tip_cell)
path_cells <- names(traverse_res$shortest_path[[1]])
if(cds@dim_reduce_type != 'ICA') {
pc_ind <- cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex
path_cells <- row.names(pc_ind)[paste('Y_', pc_ind[, 1], sep = '') %in% path_cells]
}
cds_subset <- cds[, path_cells]
newdata <- data.frame(Pseudotime = seq(0, max(Biobase::pData(cds_subset)$Pseudotime),length.out = 100))
if (requireNamespace("monocle", quietly = TRUE)) {
tmp <- monocle::genSmoothCurves(cds_subset, cores=cores, trend_formula = trend_formula,
relative_expr = T, new_data = newdata)
} else {
warning("Cannot find monocle 'monocle' is not installed.")
}
if(is.null(m))
m <- tmp
else{
m <- cbind(m, tmp)
}
}
#remove genes with no expression in any condition
m=m[!apply(m,1,sum)==0,]
norm_method <- match.arg(norm_method)
# FIXME: this needs to check that vst values can even be computed. (They can only be if we're using NB as the expressionFamily)
if (requireNamespace("monocle", quietly = TRUE)) {
if(norm_method == 'vstExprs' && is.null(cds@dispFitInfo[["blind"]]$disp_func) == FALSE) {
m = monocle::vstExprs(cds, expr_matrix=m)
}else if(norm_method == 'log') {
m = log10(m+pseudocount)
}
} else {
warning("Cannot find monocle 'monocle' is not installed.")
}
# Row-center the data.
m=m[!apply(m,1,sd)==0,]
m=Matrix::t(scale(Matrix::t(m),center=TRUE))
m=m[is.na(row.names(m)) == FALSE,]
m[is.nan(m)] = 0
m <- NULL
# branche_cell_num <- c()
for(branch_in in branches) {
branches_cells <- row.names(subset(Biobase::pData(cds), State == branch_in))
root_state <- subset(Biobase::pData(cds), Pseudotime == 0)[, 'State']
root_state_cells <- row.names(subset(Biobase::pData(cds), State == root_state))
if(cds@dim_reduce_type != 'ICA') {
root_state_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[root_state_cells, ], sep = ''))
branches_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[branches_cells, ], sep = ''))
}
root_cell <- root_state_cells[which(igraph::degree(g, v = root_state_cells) == 1)]
tip_cell <- branches_cells[which(igraph::degree(g, v = branches_cells) == 1)]
traverse_res <- traverseTree(g, root_cell, tip_cell)
path_cells <- names(traverse_res$shortest_path[[1]])
if(cds@dim_reduce_type != 'ICA') {
pc_ind <- cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex
path_cells <- row.names(pc_ind)[paste('Y_', pc_ind[, 1], sep = '') %in% path_cells]
}
cds_subset <- cds[, path_cells]
newdata <- data.frame(Pseudotime = seq(0, max(Biobase::pData(cds_subset)$Pseudotime),length.out = 100))
if (requireNamespace("monocle", quietly = TRUE)) {
tmp <- monocle::genSmoothCurves(cds_subset, cores=cores, trend_formula = trend_formula,
relative_expr = T, new_data = newdata)
} else {
warning("Cannot find monocle 'monocle' is not installed.")
}
if(is.null(m))
m <- tmp
else{
m <- cbind(m, tmp)
}
}
View(m)
branches
# branche_cell_num <- c()
branch_in = 1
branches_cells <- row.names(subset(Biobase::pData(cds), State == branch_in))
root_state <- subset(Biobase::pData(cds), Pseudotime == 0)[, 'State']
root_state_cells <- row.names(subset(Biobase::pData(cds), State == root_state))
if(cds@dim_reduce_type != 'ICA') {
root_state_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[root_state_cells, ], sep = ''))
branches_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[branches_cells, ], sep = ''))
}
root_cell <- root_state_cells[which(igraph::degree(g, v = root_state_cells) == 1)]
tip_cell <- branches_cells[which(igraph::degree(g, v = branches_cells) == 1)]
traverse_res <- traverseTree(g, root_cell, tip_cell)
path_cells <- names(traverse_res$shortest_path[[1]])
if(cds@dim_reduce_type != 'ICA') {
pc_ind <- cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex
path_cells <- row.names(pc_ind)[paste('Y_', pc_ind[, 1], sep = '') %in% path_cells]
}
cds_subset <- cds[, path_cells]
cds_subset
newdata <- data.frame(Pseudotime = seq(0, max(Biobase::pData(cds_subset)$Pseudotime),length.out = 100))
View(newdata)
tmp <- monocle::genSmoothCurves(cds_subset, cores=cores, trend_formula = trend_formula,
relative_expr = T, new_data = newdata)
View(tmp)
trend_formula
monocle::genSmoothCurves(cds_subset)
monocle::genSmoothCurves(cds_subset,new_data = newdata)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
plot_multiple_branches_heatmap(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
library(monocle)
plot_multiple_branches_heatmap(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
gc()
library(ClusterGVis)
data("BEAM_res")
data("sig_gene_names")
load("../ClusterGVis-0.1.2/data/HSMM.rda")
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
library(monocle)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
library(ClusterGVis)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
data("BEAM_res")
data("sig_gene_names")
load("../ClusterGVis-0.1.2/data/HSMM.rda")
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
library(VGAM)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
View(BEAM_res)
sig_gene_names
plot_multiple_branches_heatmap2(HSMM[sig_gene_names[1:100],],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
plot_multiple_branches_heatmap2(HSMM[sig_gene_names,],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = F,
return_heatmap = T)
plot_multiple_branches_heatmap2(HSMM[sig_gene_names[1:5],],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = F,
return_heatmap = T)
sig_gene_names[1:5]
gc()
library(devtools)
document()
check()
install()
library(devtools)
citation("Rcpp")
citation("ClusterGVis")
document()
install()
library(ClusterGVis)
citation("ClusterGVis")
citation()
citEntry()
document()
document()
install()
citation("ClusterGVis")
document()
check()
document()
check()
data("exps")
getClusters(exps)
document()
check()
install()
library(devtools)
document()
