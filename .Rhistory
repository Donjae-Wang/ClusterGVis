install()
check()
document()
install()
document()
install()
document()
install()
document()
check()
document()
install()
document()
install()
document()
install()
document()
install()
document()
install()
colanno <- jjAnno::useMyCol("stallion",n = 8)
colanno
names(colanno) <- 1:8
colanno
c(1,2,NULL)
c(1,2,NA)
library(devtools)
document()
install()
document()
install()
document()
install()
document()
install()
check()
install()
document()
install()
document()
install()
check()
document()
check()
install()
document()
install()
check()
document()
install()
document()
install()
check()
use_package("ggsci")
document()
install()
check()
document()
install()
check()
library(devtools)
document()
install()
library(devtools)
document()
install()
document()
install()
check()
library(devtools)
document()
install()
document()
install()
c(1,2) %in% 1:3
c(1,5) %in% 1:3
document()
install()
document()
install()
document()
install()
document()
install()
check()
library(devtools)
document()
install()
library(devtools)
document()
install()
document()
install()
check()
document()
install()
library(devtools)
document()
library(devtools)
document()
check()
use_package('WGCNA')
document()
check()
load('net.rda')
use_data(net)
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
library(devtools)
document()
check()
install()
document()
check()
document()
install()
document()
install()
libr
library(devtools)
document()
install()
as.numeric(unlist(strsplit(as.character("cluster10"),split = "cluster "))[2])
as.numeric(unlist(strsplit(as.character("cluster 10"),split = "cluster "))[2])
library(devtools)
document()
install()
document()
install()
document()
install()
library(devtools)
document()
install()
document()
library(devtools)
document()
install()
check()
document()
check()
install()
library(devtools)
document()
check()
install()
document()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
install()
library(devtools)
library(devtools)
document()
check()
install()
library(devtools)
check()
document()
check()
install()
document()
install()
library(devtools)
document()
check()
document()
library(devtools)
document()
install()
library(devtools)
library(devtools)
install.packages('usethis')
library(devtools)
install.packages('miniUI')
library(devtools)
install.packages('later')
library(devtools)
install.packages('promises')
library(devtools)
install.packages('devtools')
library(devtools)
load_all()
document()
install.packages('brio')
document()
document()
install.packages('WGCNA')
document()
library(devtools)
document()
check()
library(devtools)
document()
check()
install()
document()
install()
document()
install()
library(devtools)
document()
check()
check()
install()
library(devtools)
document()
install()
document()
library(devtools)
document()
check()
document()
install()
paste("C",1:8,sep = "")
document()
install()
library(devtools)
use_r("prepareDataFromscRNA")
document()
rlang::last_error()
document()
check()
#' @param group.by a string specifying the grouping variable for differential expression analysis. Default is 'ident', which groups cells by their assigned clusters.
#' @param assays a string or vector of strings specifying the assay(s) to extract from the Seurat object. Default is 'RNA'.
#' @param slot a string specifying the slot name where the assay data is stored in the Seurat object. Default is 'data'.
#' @param scale.data whether do Z-score for expression data, default TRUE.
#' @param keep.uniqGene a logical indicating whether to keep only unique gene names. Default is FALSE.
#' @param sep a character string to separate gene and cell names in the output dataframe. Default is "_".
#'
#' @return a dataframe containing the expression data for the specified genes and cells,
#' organized in a format suitable for differential gene expression analysis.
#' @export
prepareDataFromscRNA <- function(object = NULL,
diffData = NULL,
showAverage = TRUE,
cells = NULL,
group.by = 'ident',
assays = 'RNA',
slot = 'data',
scale.data = TRUE,
keep.uniqGene = FALSE,
sep = "_"){
# ============================================================================================
# get data form object
# ============================================================================================
markerGene <- unique(diffData$gene)
# choose mode
if(showAverage == TRUE){
# get cells mean gene expression
mean_gene_exp <- AverageExpression(object,
features = markerGene,
group.by = group.by,
assays = assays,
slot = slot) %>%
data.frame() %>%
as.matrix()
# add colnames
name1 <- gsub(pattern = paste0(assays,'.',sep = ''),replacement = '',colnames(mean_gene_exp))
colnames(mean_gene_exp) <- gsub(pattern = '\\.',replacement = ' ',name1)
# whether do zscore
if(scale.data == TRUE){
mean_gene_exp <- t(scale(t(mean_gene_exp)))
}
geneMode = "average"
}else{
# meta
meta <- object@meta.data %>%
dplyr::arrange(seurat_clusters)
# get all cells data
getassy <- GetAssayData(object = object,slot = slot)[features = markerGene,
cells = NULL, drop = FALSE] %>%
as.matrix()
# reorder cells
id.order <- match(rownames(meta),colnames(getassy))
getassy <- getassy[,id.order]
colnames(getassy) <- meta$seurat_clusters
mean_gene_exp <- getassy
# whether do zscore
if(scale.data == TRUE){
mean_gene_exp <- t(scale(t(mean_gene_exp)))
}
geneMode = "all"
}
# ============================================================================================
# prepare data
# ============================================================================================
# add gene column
merMat <- data.frame(mean_gene_exp,check.names = FALSE) %>%
tibble::rownames_to_column(.,var = "gene")
# count marker gene numbers for each cluster
cinfo.gene <- diffData[,c("cluster","gene")]
# loop
purrr::map_df(seq_along(unique(cinfo.gene$cluster)),function(x){
tmp <- cinfo.gene[which(cinfo.gene$cluster == x),]
# filter data
tmp2 <- merMat[which(merMat$gene %in% tmp$gene),] %>%
dplyr::mutate(cluster = as.character(x))
return(tmp2)
}) -> wide.res
# whether retain unique gene name
if(keep.uniqGene == TRUE){
wide.res <- wide.res %>% dplyr::distinct(.,gene,.keep_all = TRUE)
}else{
wide.res <- wide.res %>% dplyr::mutate(gene = make.unique(gene,sep = sep))
}
# wide to long
df <- reshape2::melt(wide.res,
id.vars = c('cluster','gene'),
variable.name = 'cell_type',
value.name = 'norm_value')
# add cluster name
df$cluster_name <- paste('cluster ',df$cluster,sep = '')
# add gene number
cltn <- table(wide.res$cluster)
cl.info <- data.frame(table(wide.res$cluster))
purrr::map_df(unique(df$cluster_name),function(x){
tmp <- df %>%
dplyr::filter(cluster_name == x)
cn = as.numeric(unlist(strsplit(as.character(x),split = "cluster "))[2])
tmp %>%
dplyr::mutate(cluster_name = paste(cluster_name," (",cltn[cn],")",sep = ''))
}) -> df
# cluster order
df$cluster_name <- factor(df$cluster_name,levels = paste("cluster ",1:nrow(cl.info),
" (",cl.info$Freq,")",sep = ''))
# return
return(list(wide.res = wide.res,
long.res = df,
type = "scRNAdata",
geneMode = geneMode))
}
document()
check()
use_package("Seurat")
use_package("tibble")
document()
check()
install()
document()
install()
document()
install()
library(devtools)
document()
install()
document()
install()
document()
install()
document()
install()
document()
install()
document()
document()
install()
document()
install()
document()
install()
document()
install()
as.numeric("abc")
if(as.numeric("abc"))
if(is.na(as.numeric("abc")))
# assign colnames
if(is.na(as.numeric(colnames(mean_gene_exp))))
is.na(as.numeric("abc"))
document()
check()
document()
install()
document()
install()
document()
install()
document()
install()
document()
install()
document()
library(devtools)
document()
install()
library(devtools)
document()
install()
document()
install()
document()
check()
install()
document()
install()
cumsum(c(2,2,2))
# ================ calculate group columns index
mulGroup = c(2,2,2)
cu <- cumsum(mulGroup)
seqn <- data.frame(st = c(1,cu[1:(length(cu) - 1)] + 1),
sp = c(cu[1],cu[2:length(cu)]))
seqn
rowMeans(seqn)
document()
check()
document()
install()
mean(c(1,2,3))
document()
install()
document()
install()
document()
install()
check()
install()
document()
install()
document()
install()
document()
install()
document()
check()
install()
document()
library(devtools)
document()
check()
document()
install()
document()
install()
document()
install()
document()
install()
document()
install()
document()
install()
library(devtools)
document()
install()
document()
install()
library(devtools)
document()
check()
install()
document()
check()
install()
document()
check()
install()
document()
check()
install()
document()
check()
install()
library(devtools)
document()
check()
install()
library(devtools)
document()
install()
ht.col.list = list()
ht.col.list[["col_range"]]
col_range = ht.col.list[["col_range"]]
length(col_range)
library(devtools)
document()
check()
document()
install()
ht.col.list = list()
col_range = ht.col.list[["col_range"]]
col_color = ht.col.list[["col_color"]]
col_range
col_color
if(is.null(col_range)){
col_range = c(-2, 0, 2)
}else if(is.null(col_color)){
col_color = c("#08519C", "white", "#A50F15")
}else if(is.null(col_range) & is.null(col_color)){
col_range = c(-2, 0, 2)
col_color = c("#08519C", "white", "#A50F15")
}
col_range
col_color
document()
install()
