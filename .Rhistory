library(devtools)
document()
check()
install()
document()
install()
document()
install()
install.packages("scCustomize")
document()
check()
install()
library(devtools)
docu
library(devtools)
document()
check()
document()
install()
library(devtools)
document()
library(devtools)
document()
check()
library(devtools)
document()
check()
install()
document()
install()
library(devtools)
library(devtools)
document()
check()
library(devtools)
document()
document()
install()
# var <- c("cluster","membership")
var <- c(.data[["cluster"]],.data[["membership"]])
c(.data[["cluster"]],.data[["membership"]])
document()
install()
check()
document()
install()
library(devtools)
document()
install()
document()
library(devtools)
document()
library(devtools)
document()
install()
check()
library(devtools)
document()
chec
check()
install()
document()
document()
install()
library(devtools)
document()
document()
install()
check()
library(devtools)
document()
install()
document()
install()
document()
install()
library(devtools)
document()
install()
check()
document()
check()
install()
library(devtools)
document()
library(devtools)
document()
document()
document()
document()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
use_gpl3_license()
document()
check()
document()
library(devtools)
document()
check()
library(devtools)
document()
check()
use_mit_license()
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
load_all()
document()
document()
check()
rcmdcheck::rcmdcheck()
check()
library(devtools)
document()
check()
install()
document()
install()
install()
document()
library(devtools)
document()
install()
document()
install()
library(devtools)
document()
document()
pkgload::dev_help('plot_genes_branched_heatmap2')
library(exps)
library(ClusterGVis)
data("exps")
class(exps)
document()
document()
check()
document()
document()
check()
library(ClusterGVis)
data(exps)
cluster.method = "mfuzz"
document()
document()
check()
install()
document()
install()
document()
check()
document()
check()
install.packages("usethis")
library(devtools)
document()
check()
use_package("SingleCellExperiment")
document()
check()
use_package("methods")
check()
document()
check()
document()
check()
check()
document()
check()
document()
document()
document()
check()
document()
check()
library(ClusterGVis)
data("exps")
cm <- clusterData(exp = exps,
cluster.method = "mfuzz",
cluster.num = 8)
document()
check()
data("exps")
cm <- clusterData(obj = exps,cluster.method = "mfuzz",cluster.num = 8)
class(exps)
document()
check()
obj=exps
# check datatype
cls <- class(obj)
cls
if(cls == "cell_data_set"){
extra_params <- list(cds_obj = obj,assays = "counts",...)
exp <- do.call(pre_pseudotime_matrix,extra_params)
}else if(cls %in% c("matrix","data.frame")){
exp <- obj
}
# ==========================================================================
# mfuzz
# ==========================================================================
# cluster data
# myset <- methods::new("ExpressionSet",exprs = as.matrix(exp))
myset <- Biobase::ExpressionSet(assayData = as.matrix(exp))
myset <- Mfuzz::filter.std(myset,min.std = min.std,visu = FALSE)
min.std
min.std = 0
myset <- Mfuzz::filter.std(myset,min.std = min.std,visu = FALSE)
min.std
# ==========================================================================
# mfuzz
# ==========================================================================
# cluster data
# myset <- methods::new("ExpressionSet",exprs = as.matrix(exp))
myset <- Biobase::ExpressionSet(assayData = as.matrix(exp))
myset
myset <- filter.std(myset,min.std = min.std,visu = FALSE)
myset <- Mfuzz::filter.std(myset,min.std = min.std,visu = FALSE)
# ==========================================================================
# mfuzz
# ==========================================================================
# cluster data
# myset <- methods::new("ExpressionSet",exprs = as.matrix(exp))
myset <- Biobase::ExpressionSet(assayData = as.matrix(exp))
myset <- Mfuzz::filter.std(myset,min.std = min.std,visu = FALSE)
library(devtools)
document()
check()
document()
check()
install()
data("exps")
cm <- clusterData(obj = exps,
cluster.method = "mfuzz",
cluster.num = 8)
obj = exps
cluster.method = "mfuzz"
cluster.num = 8
min.std = 0
# check datatype
cls <- class(obj)
cls
if(cls == "cell_data_set"){
extra_params <- list(cds_obj = obj,assays = "counts",...)
exp <- do.call(pre_pseudotime_matrix,extra_params)
}else if(cls %in% c("matrix","data.frame")){
exp <- obj
}
# choose method
cluster.method <- match.arg(cluster.method)
cluster.method
# ==========================================================================
# mfuzz
# ==========================================================================
# cluster data
# myset <- methods::new("ExpressionSet",exprs = as.matrix(exp))
myset <- Biobase::ExpressionSet(assayData = as.matrix(exp))
myset <- filter.std(myset,min.std = min.std,visu = FALSE)
#' @name filter.std modified by Mfuzz filter.std
#' @title using filter.std to filter low expression genes
#'
#' @param eset expression matrix, default NULL.
#' @param min.std min stand error, default 0.
#' @param visu whether plot, default FALSE.
#'
#' @return matrix.
filter.std <- function(eset = NULL,
min.std = 0,
visu = FALSE){
#index <- logical(dim(exprs(eset))[1])
# tmp <- logical(dim(eset)[1])
tmp <- logical(dim(Biobase::exprs(eset))[1])
if (is.numeric(min.std)){
data <- eset
for (i in 1:length(tmp)){
tmp[i]   <- stats::sd(data[i,],na.rm=TRUE)
#   index[i]  <- ( tmp[i] > min.std)
}
index <- tmp > min.std
index[is.na(index)] <- TRUE
print(paste(sum(!index),"genes excluded.\n"))
}
if (visu){
plot(sort(tmp),xlab = "Ordered genes",ylab = "Sd")
}
eset[index,]
}
myset <- filter.std(myset,min.std = min.std,visu = FALSE)
eset = myset
min.std = 0
#index <- logical(dim(exprs(eset))[1])
# tmp <- logical(dim(eset)[1])
tmp <- logical(dim(Biobase::exprs(eset))[1])
tmp
if (is.numeric(min.std)){
data <- eset
for (i in 1:length(tmp)){
tmp[i]   <- stats::sd(data[i,],na.rm=TRUE)
#   index[i]  <- ( tmp[i] > min.std)
}
index <- tmp > min.std
index[is.na(index)] <- TRUE
print(paste(sum(!index),"genes excluded.\n"))
}
is.numeric(min.std)
data <- eset
for (i in 1:length(tmp)){
tmp[i]   <- stats::sd(data[i,],na.rm=TRUE)
#   index[i]  <- ( tmp[i] > min.std)
}
View(data)
data
#   index[i]  <- ( tmp[i] > min.std)
stats::sd(data[1,],na.rm=TRUE)
data[1,]
stats::sd(data[1,],na.rm=TRUE)
data <- Biobase::exprs(eset)
document()
check()
document()
check()
document()
check()
install()
document()
check()
install()
library(ClusterGVis)
data("exps")
getClusters(exps)
# load data
data(exps)
# using kemans for clustering
ck <- clusterData(exp = exps,
cluster.method = "kmeans",
cluster.num = 8)
# using kemans for clustering
ck <- clusterData(obj = exps,
cluster.method = "kmeans",
cluster.num = 8)
library(org.Mm.eg.db)
# enrich for clusters
enrich <- enrichCluster(object = ck,
OrgDb = org.Mm.eg.db,
type = "KEGG",
pvalueCutoff = 0.05,
topn = 5,
seed = 5201314)
object = ck
OrgDb = org.Mm.eg.db
type = "KEGG"
pvalueCutoff = 0.05
topn = 5
seed = 5201314
type <- match.arg(type)
heatmap.type <- match.arg(heatmap.type)
heatmap.type <- match.arg(heatmap.type,c("plot_pseudotime_heatmap2",
"plot_genes_branched_heatmap2",
"plot_multiple_branches_heatmap2"))
heatmap.type = c("plot_pseudotime_heatmap2",
"plot_genes_branched_heatmap2",
"plot_multiple_branches_heatmap2")
heatmap.type <- match.arg(heatmap.type)
heatmap.type <- match.arg(heatmap.type,c("plot_pseudotime_heatmap2",
"plot_genes_branched_heatmap2",
"plot_multiple_branches_heatmap2"))
type
heatmap.type
# check datatype
cls <- class(object)
cls
# check heatmap.type
if(cls == "CellDataSet"){
if(heatmap.type %in% c("plot_pseudotime_heatmap2", "plot_genes_branched_heatmap2")){
extra_params <- list(cds_subset = object,...)
object <- do.call(plot_pseudotime_heatmap2,extra_params)
}else{
extra_params <- list(cds = object,...)
object <- do.call(plot_pseudotime_heatmap2,extra_params)
}
}
# get data
enrich.data <- object$wide.res
View(enrich.data)
# check geneType
if(startsWith(object$geneType,"nounique")){
split = unlist(strsplit(object$geneType,split = "\\|"))[2]
enrich.data$gene <- sapply(strsplit(as.character(enrich.data$gene),split = split),"[",1)
}
length(unique(enrich.data$cluster))
x=1
# enrich for clusters
enrich <- enrichCluster(object = ck,
OrgDb = org.Mm.eg.db,
type = "KEGG",
pvalueCutoff = 1,
topn = 5,
seed = 5201314)
# filter
tmp <- enrich.data %>%
dplyr::filter(cluster == unique(enrich.data$cluster)[x])
# entriz id transformation
id.trans <- ifelse(type == "ownSet",FALSE,TRUE)
if(id.trans == TRUE){
gene.ent <- clusterProfiler::bitr(tmp$gene,
fromType = fromType,
toType = toType,
OrgDb = OrgDb)
tartget.gene = unlist(gene.ent[,c(toType)])
}else{
tartget.gene = tmp$gene
}
fromType = "SYMBOL"
toType = c("ENTREZID")
id.trans = TRUE
# entriz id transformation
id.trans <- ifelse(type == "ownSet",FALSE,TRUE)
if(id.trans == TRUE){
gene.ent <- clusterProfiler::bitr(tmp$gene,
fromType = fromType,
toType = toType,
OrgDb = OrgDb)
tartget.gene = unlist(gene.ent[,c(toType)])
}else{
tartget.gene = tmp$gene
}
tartget.gene
ego <- clusterProfiler::enrichKEGG(gene          = tartget.gene,
keyType       = "kegg",
organism      = organism,
universe      = NULL,
pvalueCutoff  = 1,
pAdjustMethod = "BH",
qvalueCutoff  = 1)
organism
# enrich for clusters
enrich <- enrichCluster(object = ck,
OrgDb = org.Mm.eg.db,
type = "KEGG",
organism = "mmu",
pvalueCutoff = 1,
topn = 5,
seed = 5201314)
document()
library(devtools)
document()
check()
install()
install()
